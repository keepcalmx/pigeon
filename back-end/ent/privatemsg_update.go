// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keepcalmx/go-pigeon/ent/predicate"
	"github.com/keepcalmx/go-pigeon/ent/privatemsg"
)

// PrivateMsgUpdate is the builder for updating PrivateMsg entities.
type PrivateMsgUpdate struct {
	config
	hooks    []Hook
	mutation *PrivateMsgMutation
}

// Where appends a list predicates to the PrivateMsgUpdate builder.
func (pmu *PrivateMsgUpdate) Where(ps ...predicate.PrivateMsg) *PrivateMsgUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetFrom sets the "from" field.
func (pmu *PrivateMsgUpdate) SetFrom(s string) *PrivateMsgUpdate {
	pmu.mutation.SetFrom(s)
	return pmu
}

// SetTo sets the "to" field.
func (pmu *PrivateMsgUpdate) SetTo(s string) *PrivateMsgUpdate {
	pmu.mutation.SetTo(s)
	return pmu
}

// SetType sets the "type" field.
func (pmu *PrivateMsgUpdate) SetType(s string) *PrivateMsgUpdate {
	pmu.mutation.SetType(s)
	return pmu
}

// SetContent sets the "content" field.
func (pmu *PrivateMsgUpdate) SetContent(s string) *PrivateMsgUpdate {
	pmu.mutation.SetContent(s)
	return pmu
}

// SetRead sets the "read" field.
func (pmu *PrivateMsgUpdate) SetRead(b bool) *PrivateMsgUpdate {
	pmu.mutation.SetRead(b)
	return pmu
}

// SetCreatedAt sets the "created_at" field.
func (pmu *PrivateMsgUpdate) SetCreatedAt(t time.Time) *PrivateMsgUpdate {
	pmu.mutation.SetCreatedAt(t)
	return pmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmu *PrivateMsgUpdate) SetNillableCreatedAt(t *time.Time) *PrivateMsgUpdate {
	if t != nil {
		pmu.SetCreatedAt(*t)
	}
	return pmu
}

// Mutation returns the PrivateMsgMutation object of the builder.
func (pmu *PrivateMsgUpdate) Mutation() *PrivateMsgMutation {
	return pmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PrivateMsgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pmu.hooks) == 0 {
		affected, err = pmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmu.mutation = mutation
			affected, err = pmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmu.hooks) - 1; i >= 0; i-- {
			if pmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PrivateMsgUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PrivateMsgUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PrivateMsgUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmu *PrivateMsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   privatemsg.Table,
			Columns: privatemsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: privatemsg.FieldID,
			},
		},
	}
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldFrom,
		})
	}
	if value, ok := pmu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldTo,
		})
	}
	if value, ok := pmu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldType,
		})
	}
	if value, ok := pmu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldContent,
		})
	}
	if value, ok := pmu.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: privatemsg.FieldRead,
		})
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemsg.FieldCreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PrivateMsgUpdateOne is the builder for updating a single PrivateMsg entity.
type PrivateMsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivateMsgMutation
}

// SetFrom sets the "from" field.
func (pmuo *PrivateMsgUpdateOne) SetFrom(s string) *PrivateMsgUpdateOne {
	pmuo.mutation.SetFrom(s)
	return pmuo
}

// SetTo sets the "to" field.
func (pmuo *PrivateMsgUpdateOne) SetTo(s string) *PrivateMsgUpdateOne {
	pmuo.mutation.SetTo(s)
	return pmuo
}

// SetType sets the "type" field.
func (pmuo *PrivateMsgUpdateOne) SetType(s string) *PrivateMsgUpdateOne {
	pmuo.mutation.SetType(s)
	return pmuo
}

// SetContent sets the "content" field.
func (pmuo *PrivateMsgUpdateOne) SetContent(s string) *PrivateMsgUpdateOne {
	pmuo.mutation.SetContent(s)
	return pmuo
}

// SetRead sets the "read" field.
func (pmuo *PrivateMsgUpdateOne) SetRead(b bool) *PrivateMsgUpdateOne {
	pmuo.mutation.SetRead(b)
	return pmuo
}

// SetCreatedAt sets the "created_at" field.
func (pmuo *PrivateMsgUpdateOne) SetCreatedAt(t time.Time) *PrivateMsgUpdateOne {
	pmuo.mutation.SetCreatedAt(t)
	return pmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmuo *PrivateMsgUpdateOne) SetNillableCreatedAt(t *time.Time) *PrivateMsgUpdateOne {
	if t != nil {
		pmuo.SetCreatedAt(*t)
	}
	return pmuo
}

// Mutation returns the PrivateMsgMutation object of the builder.
func (pmuo *PrivateMsgUpdateOne) Mutation() *PrivateMsgMutation {
	return pmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PrivateMsgUpdateOne) Select(field string, fields ...string) *PrivateMsgUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PrivateMsg entity.
func (pmuo *PrivateMsgUpdateOne) Save(ctx context.Context) (*PrivateMsg, error) {
	var (
		err  error
		node *PrivateMsg
	)
	if len(pmuo.hooks) == 0 {
		node, err = pmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pmuo.mutation = mutation
			node, err = pmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmuo.hooks) - 1; i >= 0; i-- {
			if pmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PrivateMsg)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PrivateMsgMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PrivateMsgUpdateOne) SaveX(ctx context.Context) *PrivateMsg {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PrivateMsgUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PrivateMsgUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pmuo *PrivateMsgUpdateOne) sqlSave(ctx context.Context) (_node *PrivateMsg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   privatemsg.Table,
			Columns: privatemsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: privatemsg.FieldID,
			},
		},
	}
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateMsg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatemsg.FieldID)
		for _, f := range fields {
			if !privatemsg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatemsg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldFrom,
		})
	}
	if value, ok := pmuo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldTo,
		})
	}
	if value, ok := pmuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldType,
		})
	}
	if value, ok := pmuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldContent,
		})
	}
	if value, ok := pmuo.mutation.Read(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: privatemsg.FieldRead,
		})
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemsg.FieldCreatedAt,
		})
	}
	_node = &PrivateMsg{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
