// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keepcalmx/go-pigeon/ent/privatemsg"
)

// PrivateMsgCreate is the builder for creating a PrivateMsg entity.
type PrivateMsgCreate struct {
	config
	mutation *PrivateMsgMutation
	hooks    []Hook
}

// SetFrom sets the "from" field.
func (pmc *PrivateMsgCreate) SetFrom(s string) *PrivateMsgCreate {
	pmc.mutation.SetFrom(s)
	return pmc
}

// SetTo sets the "to" field.
func (pmc *PrivateMsgCreate) SetTo(s string) *PrivateMsgCreate {
	pmc.mutation.SetTo(s)
	return pmc
}

// SetType sets the "type" field.
func (pmc *PrivateMsgCreate) SetType(s string) *PrivateMsgCreate {
	pmc.mutation.SetType(s)
	return pmc
}

// SetContent sets the "content" field.
func (pmc *PrivateMsgCreate) SetContent(s string) *PrivateMsgCreate {
	pmc.mutation.SetContent(s)
	return pmc
}

// SetRead sets the "read" field.
func (pmc *PrivateMsgCreate) SetRead(b bool) *PrivateMsgCreate {
	pmc.mutation.SetRead(b)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PrivateMsgCreate) SetCreatedAt(t time.Time) *PrivateMsgCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PrivateMsgCreate) SetNillableCreatedAt(t *time.Time) *PrivateMsgCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// Mutation returns the PrivateMsgMutation object of the builder.
func (pmc *PrivateMsgCreate) Mutation() *PrivateMsgMutation {
	return pmc.mutation
}

// Save creates the PrivateMsg in the database.
func (pmc *PrivateMsgCreate) Save(ctx context.Context) (*PrivateMsg, error) {
	var (
		err  error
		node *PrivateMsg
	)
	pmc.defaults()
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pmc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PrivateMsg)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PrivateMsgMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PrivateMsgCreate) SaveX(ctx context.Context) *PrivateMsg {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PrivateMsgCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PrivateMsgCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PrivateMsgCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := privatemsg.DefaultCreatedAt
		pmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PrivateMsgCreate) check() error {
	if _, ok := pmc.mutation.From(); !ok {
		return &ValidationError{Name: "from", err: errors.New(`ent: missing required field "PrivateMsg.from"`)}
	}
	if _, ok := pmc.mutation.To(); !ok {
		return &ValidationError{Name: "to", err: errors.New(`ent: missing required field "PrivateMsg.to"`)}
	}
	if _, ok := pmc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "PrivateMsg.type"`)}
	}
	if _, ok := pmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PrivateMsg.content"`)}
	}
	if _, ok := pmc.mutation.Read(); !ok {
		return &ValidationError{Name: "read", err: errors.New(`ent: missing required field "PrivateMsg.read"`)}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PrivateMsg.created_at"`)}
	}
	return nil
}

func (pmc *PrivateMsgCreate) sqlSave(ctx context.Context) (*PrivateMsg, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pmc *PrivateMsgCreate) createSpec() (*PrivateMsg, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivateMsg{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: privatemsg.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: privatemsg.FieldID,
			},
		}
	)
	if value, ok := pmc.mutation.From(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldFrom,
		})
		_node.From = value
	}
	if value, ok := pmc.mutation.To(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldTo,
		})
		_node.To = value
	}
	if value, ok := pmc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pmc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemsg.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := pmc.mutation.Read(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: privatemsg.FieldRead,
		})
		_node.Read = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemsg.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// PrivateMsgCreateBulk is the builder for creating many PrivateMsg entities in bulk.
type PrivateMsgCreateBulk struct {
	config
	builders []*PrivateMsgCreate
}

// Save creates the PrivateMsg entities in the database.
func (pmcb *PrivateMsgCreateBulk) Save(ctx context.Context) ([]*PrivateMsg, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PrivateMsg, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivateMsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PrivateMsgCreateBulk) SaveX(ctx context.Context) []*PrivateMsg {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PrivateMsgCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PrivateMsgCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
