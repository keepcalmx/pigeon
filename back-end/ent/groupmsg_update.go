// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/keepcalmx/go-pigeon/ent/groupmsg"
	"github.com/keepcalmx/go-pigeon/ent/predicate"
)

// GroupMsgUpdate is the builder for updating GroupMsg entities.
type GroupMsgUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMsgMutation
}

// Where appends a list predicates to the GroupMsgUpdate builder.
func (gmu *GroupMsgUpdate) Where(ps ...predicate.GroupMsg) *GroupMsgUpdate {
	gmu.mutation.Where(ps...)
	return gmu
}

// SetFrom sets the "from" field.
func (gmu *GroupMsgUpdate) SetFrom(s string) *GroupMsgUpdate {
	gmu.mutation.SetFrom(s)
	return gmu
}

// SetTo sets the "to" field.
func (gmu *GroupMsgUpdate) SetTo(s string) *GroupMsgUpdate {
	gmu.mutation.SetTo(s)
	return gmu
}

// SetType sets the "type" field.
func (gmu *GroupMsgUpdate) SetType(s string) *GroupMsgUpdate {
	gmu.mutation.SetType(s)
	return gmu
}

// SetContent sets the "content" field.
func (gmu *GroupMsgUpdate) SetContent(s string) *GroupMsgUpdate {
	gmu.mutation.SetContent(s)
	return gmu
}

// SetCreatedAt sets the "created_at" field.
func (gmu *GroupMsgUpdate) SetCreatedAt(t time.Time) *GroupMsgUpdate {
	gmu.mutation.SetCreatedAt(t)
	return gmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmu *GroupMsgUpdate) SetNillableCreatedAt(t *time.Time) *GroupMsgUpdate {
	if t != nil {
		gmu.SetCreatedAt(*t)
	}
	return gmu
}

// Mutation returns the GroupMsgMutation object of the builder.
func (gmu *GroupMsgUpdate) Mutation() *GroupMsgMutation {
	return gmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gmu *GroupMsgUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gmu.hooks) == 0 {
		affected, err = gmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmu.mutation = mutation
			affected, err = gmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gmu.hooks) - 1; i >= 0; i-- {
			if gmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmu *GroupMsgUpdate) SaveX(ctx context.Context) int {
	affected, err := gmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gmu *GroupMsgUpdate) Exec(ctx context.Context) error {
	_, err := gmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmu *GroupMsgUpdate) ExecX(ctx context.Context) {
	if err := gmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmu *GroupMsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmsg.Table,
			Columns: groupmsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupmsg.FieldID,
			},
		},
	}
	if ps := gmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmu.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldFrom,
		})
	}
	if value, ok := gmu.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldTo,
		})
	}
	if value, ok := gmu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldType,
		})
	}
	if value, ok := gmu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldContent,
		})
	}
	if value, ok := gmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmsg.FieldCreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GroupMsgUpdateOne is the builder for updating a single GroupMsg entity.
type GroupMsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMsgMutation
}

// SetFrom sets the "from" field.
func (gmuo *GroupMsgUpdateOne) SetFrom(s string) *GroupMsgUpdateOne {
	gmuo.mutation.SetFrom(s)
	return gmuo
}

// SetTo sets the "to" field.
func (gmuo *GroupMsgUpdateOne) SetTo(s string) *GroupMsgUpdateOne {
	gmuo.mutation.SetTo(s)
	return gmuo
}

// SetType sets the "type" field.
func (gmuo *GroupMsgUpdateOne) SetType(s string) *GroupMsgUpdateOne {
	gmuo.mutation.SetType(s)
	return gmuo
}

// SetContent sets the "content" field.
func (gmuo *GroupMsgUpdateOne) SetContent(s string) *GroupMsgUpdateOne {
	gmuo.mutation.SetContent(s)
	return gmuo
}

// SetCreatedAt sets the "created_at" field.
func (gmuo *GroupMsgUpdateOne) SetCreatedAt(t time.Time) *GroupMsgUpdateOne {
	gmuo.mutation.SetCreatedAt(t)
	return gmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmuo *GroupMsgUpdateOne) SetNillableCreatedAt(t *time.Time) *GroupMsgUpdateOne {
	if t != nil {
		gmuo.SetCreatedAt(*t)
	}
	return gmuo
}

// Mutation returns the GroupMsgMutation object of the builder.
func (gmuo *GroupMsgUpdateOne) Mutation() *GroupMsgMutation {
	return gmuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gmuo *GroupMsgUpdateOne) Select(field string, fields ...string) *GroupMsgUpdateOne {
	gmuo.fields = append([]string{field}, fields...)
	return gmuo
}

// Save executes the query and returns the updated GroupMsg entity.
func (gmuo *GroupMsgUpdateOne) Save(ctx context.Context) (*GroupMsg, error) {
	var (
		err  error
		node *GroupMsg
	)
	if len(gmuo.hooks) == 0 {
		node, err = gmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMsgMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gmuo.mutation = mutation
			node, err = gmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(gmuo.hooks) - 1; i >= 0; i-- {
			if gmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gmuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GroupMsg)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GroupMsgMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (gmuo *GroupMsgUpdateOne) SaveX(ctx context.Context) *GroupMsg {
	node, err := gmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gmuo *GroupMsgUpdateOne) Exec(ctx context.Context) error {
	_, err := gmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmuo *GroupMsgUpdateOne) ExecX(ctx context.Context) {
	if err := gmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gmuo *GroupMsgUpdateOne) sqlSave(ctx context.Context) (_node *GroupMsg, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupmsg.Table,
			Columns: groupmsg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: groupmsg.FieldID,
			},
		},
	}
	id, ok := gmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupMsg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupmsg.FieldID)
		for _, f := range fields {
			if !groupmsg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != groupmsg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gmuo.mutation.From(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldFrom,
		})
	}
	if value, ok := gmuo.mutation.To(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldTo,
		})
	}
	if value, ok := gmuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldType,
		})
	}
	if value, ok := gmuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmsg.FieldContent,
		})
	}
	if value, ok := gmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: groupmsg.FieldCreatedAt,
		})
	}
	_node = &GroupMsg{config: gmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{groupmsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
